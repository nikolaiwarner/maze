{"version":3,"sources":["lib/mazeGenerator.ts","components/Maze.tsx","App.tsx","serviceWorker.js","index.js"],"names":["astar","require","randomInt","min","max","Math","floor","random","createGrid","maze","grid","indexCol","height","row","indexRow","width","push","round","startPosition","y","x","endPosition","setMazeStartAndEnd","positions","top","bottom","left","right","center","start","end","testMaze","graph","Graph","diagonal","search","generate","result","count","length","console","log","MazeContainer","styled","div","props","RoomContainer","RoomStart","roomSize","RoomEnd","Wall","WallNorth","WallSouth","WallEast","WallWest","Room","walls","room","north","south","east","west","findWalls","Maze","map","rowIndex","col","colIndex","isStart","isEnd","key","totalColumns","value","AppStyled","Menu","Input","input","defaultMaze","App","useState","setMaze","setWidth","setHeight","useEffect","className","onClick","generator","type","defaultValue","onChange","e","parseInt","target","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8703b087.chunk.js","sourcesContent":["const astar = require('javascript-astar')\n\nexport interface mazeInterface {\n  width: number,\n  height: number,\n  start: 'top'|'left'|'bottom'|'right'|'center'|'random', \n  end: 'top'|'left'|'bottom'|'right'|'center'|'random',\n  grid?: Array<Array<number>>,\n  startPosition?: {\n    x: number,\n    y: number\n  },\n  endPosition?: {\n    x: number,\n    y: number\n  },\n}\n\ninterface mazeStartEndInterface {\n}\n\nexport const randomInt = (min: number, max: number) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nexport const createGrid = (maze: mazeInterface) => {\n  let grid = []\n  for (let indexCol = 0; indexCol < maze.height; indexCol++) {\n    let row = []\n    for (let indexRow = 0; indexRow < maze.width; indexRow++) {\n      row.push(Math.round(Math.random()))\n    }\n    grid.push(row)\n  }\n  // Clear path for start and end\n  grid[maze.startPosition!.y][maze.startPosition!.x] = 1\n  grid[maze.endPosition!.y][maze.endPosition!.x] = 1\n  return grid\n}\n\nexport const findWalls = (room: any, maze: mazeInterface) => {\n  const grid = maze.grid || []\n  let walls = {\n    north: (grid[room.y - 1] && grid[room.y - 1][room.x] === 0),\n    south: (grid[room.y + 1] && grid[room.y + 1][room.x] === 0),\n    east: (grid[room.y][room.x + 1] === 0),\n    west: (grid[room.y][room.x - 1] === 0),\n  }\n  return walls\n}\n\nexport const setMazeStartAndEnd = (maze: mazeInterface) => {\n  const positions = {\n    top: {\n      x: randomInt(0, maze.width - 1),\n      y: 0\n    },\n    bottom: {\n      x: randomInt(0, maze.width - 1),\n      y: maze.height - 1\n    },\n    left: {\n      x: 0,\n      y: randomInt(0, maze.height - 1)\n    },\n    right: {\n      x: maze.width - 1,\n      y: randomInt(0, maze.width - 1)\n    },\n    center: {\n      x: Math.round(maze.width / 2),\n      y: Math.round(maze.height / 2)\n    },\n    random: {\n      x: randomInt(0, maze.width - 1),\n      y: randomInt(0, maze.height - 1)\n    }\n  }\n  maze.startPosition = positions[maze.start]\n  maze.endPosition = positions[maze.end]\n  return maze\n}\n\nexport const testMaze = (maze: mazeInterface) => {\n  const graph = new astar.Graph(maze.grid, { diagonal: false })\n  const start = graph.grid[maze.startPosition!.y][maze.startPosition!.x]\n  const end = graph.grid[maze.endPosition!.y][maze.endPosition!.x]\n  return astar.astar.search(graph, start, end)\n}\n\nconst generate = (maze: mazeInterface): mazeInterface => {\n  let result = []\n  let count = 0\n  while (!result.length) {\n    count++\n    maze = setMazeStartAndEnd(maze)\n    maze.grid = createGrid(maze)\n    result = testMaze(maze)\n  }\n  console.log(`iterations: ${count}`, result)\n  return maze\n}\n\nexport default generate \n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\n\nimport { mazeInterface, findWalls } from '../lib/mazeGenerator'\n\nconst roomSize = 30\nconst wallWidth = 10\n\ninterface MazeContainerInterface {\n  width: number,\n  height: number\n}\n\ninterface RoomProps {\n  key: string,\n  maze: mazeInterface,\n  x: number,\n  y: number,\n  totalColumns: number,\n  value: number,\n  isStart?: boolean,\n  isEnd?: boolean,\n  title?: string\n}\n\ninterface WallProps {\n  north?: boolean,\n  south?: boolean,\n  east?: boolean,\n  west?: boolean,\n}\n\nconst MazeContainer = styled.div<MazeContainerInterface>`\n  position: relative;\n  margin: auto;\n  width: ${props => props.width * roomSize}px;\n  height: ${props => props.height * roomSize}px;\n  border: 10px solid #282c34;\n  background: #fff;\n`\n\nconst RoomContainer = styled.div<RoomProps>`\n  width: ${roomSize}px;\n  height: ${roomSize}px;\n  position: absolute;\n  top: ${props => props.y * roomSize}px;\n  left: ${props => props.x * roomSize}px;\n  font-size: 8px;\n  color: #f00;\n`\nconst RoomStart = styled(RoomContainer)`\n  width: 10px;\n  height: 10px;\n  margin: 12px 12px;\n  background-color: red;\n  border-radius: ${roomSize/2}px;\n`\nconst RoomEnd = styled(RoomStart)`\n  background-color: green;\n`\n\nconst Wall = styled.div<WallProps>`\n  position: absolute;\n  background-color: #282c34;\n  border-radius: 0px;\n  box-shadow: 1px 3px 0px #282c3430;\n`\nconst WallNorth = styled(Wall)`\n  top: 0;\n  left: 0;  \n  width: ${roomSize}px;\n  height: ${wallWidth}px;\n`\nconst WallSouth = styled(Wall)`\n  top: ${roomSize}px;\n  left: 0;\n  position: absolute;\n  width: ${roomSize}px;\n  height: ${wallWidth}px;\n`\nconst WallEast = styled(Wall)`\n  top: 0;\n  left: ${roomSize}px;\n  position: absolute;\n  width: ${wallWidth}px;\n  height: ${roomSize}px;\n`\nconst WallWest = styled(Wall)`\n  top: 0;\n  left: 0;\n  position: absolute;\n  width: ${wallWidth}px;\n  height: ${roomSize}px;\n`\n\nfunction Room (props: RoomProps) {\n  const walls = findWalls(props, props.maze)\n  return (\n    <RoomContainer {...props}>\n      {!!walls.north && <WallNorth />}\n      {!!walls.south && <WallSouth />}\n      {!!walls.east && <WallEast />}\n      {!!walls.west && <WallWest />}\n    </RoomContainer>\n  )\n}\n\nfunction Maze (props: { maze: mazeInterface }) {\n  let {startPosition, endPosition, grid} = props.maze\n  if (!grid) {\n    return null\n  } else {\n    return (\n      <MazeContainer width={props.maze.width} height={props.maze.height}>\n        {grid.map((row, rowIndex) => {\n          return row.map((col, colIndex) => {\n            const isStart = (startPosition!.x === colIndex) && (startPosition!.y === rowIndex)\n            const isEnd = (endPosition!.x === colIndex) && (endPosition!.y === rowIndex)\n            if (isStart) {\n              return (\n                <RoomStart \n                  maze={props.maze}\n                  key={`${rowIndex},${colIndex}`}\n                  totalColumns={grid!.length} \n                  x={colIndex} \n                  y={rowIndex} \n                  value={col} \n                  isStart={isStart}\n                  isEnd={isEnd}\n                />\n              )\n            }\n            if (isEnd) {\n              return (\n                <RoomEnd\n                  maze={props.maze}\n                  key={`${rowIndex},${colIndex}`}\n                  totalColumns={grid!.length} \n                  x={colIndex} \n                  y={rowIndex} \n                  value={col} \n                  isStart={isStart}\n                  isEnd={isEnd}\n                />\n              )\n            }\n            if (col === 1) {\n              return (\n                <Room \n                  maze={props.maze}\n                  key={`${rowIndex},${colIndex}`}\n                  totalColumns={grid!.length} \n                  x={colIndex} \n                  y={rowIndex} \n                  value={col} \n                  isStart={isStart}\n                  isEnd={isEnd}\n                />\n              )\n            } else {\n              return null\n            }\n          })\n        })}\n      </MazeContainer>\n    )\n  }\n}\n\nexport default Maze\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\n\nimport generator, { mazeInterface } from './lib/mazeGenerator'\nimport Maze from './components/Maze'\n\nimport './App.css'\n\nconst AppStyled = styled.div`\n  /* background-color: #282c34; */\n`\n\nconst Menu = styled.div`\n  position: absolute;\n  right: 1rem;\n  top: 1rem;\n  z-index: 1;\n`\n\nconst Input = styled.input`\n  width: 20px;\n`\n\nconst defaultMaze: mazeInterface = {\n  width: 0,\n  height: 0,\n  start: 'top',\n  end: 'bottom'\n}\n\nfunction App () {\n  let [maze, setMaze] = useState(defaultMaze)\n  let [width, setWidth] = useState(20)\n  let [height, setHeight] = useState(20)\n\n  useEffect(() => {\n    console.log({maze})\n  }, [maze])\n  \n  const onClickNewMaze = () => {\n    setMaze(generator({\n      width: width || 1,\n      height: height || 1,\n      start: 'top',\n      end: 'bottom'\n    }))\n  }\n\n  return (\n    <AppStyled>\n      <Menu className='menu'>\n        <h1>maze</h1>\n        <button onClick={onClickNewMaze}>new maze</button>\n        <Input type='text' defaultValue={height} onChange={(e) => setHeight(parseInt(e.target.value))} placeholder='height' />\n        <Input type='text' defaultValue={width} onChange={(e) => setWidth(parseInt(e.target.value))} placeholder='width' />\n      </Menu>\n      <Maze maze={maze} />\n    </AppStyled>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}